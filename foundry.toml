[profile.default]
  auto_detect_solc = false
  bytecode_hash = "none"
  cbor_metadata = false
  fs_permissions = [{ access = "read", path = "./optimized-out" }]
  libs = ["lib"]
  gas_reports = [
    "SablierV2Comptroller",
    "SablierV2LockupLinear",
    "SablierV2LockupPro",
  ]
  optimizer = true
  optimizer_runs = 5_000
  out = "out"
  script = "script"
  solc = "0.8.19"
  src = "src"
  test = "test"

[profile.default.fuzz]
  max_test_rejects = 1_000_000 # Number of times `vm.assume` can fail
  runs = 50

[profile.default.invariant]
  call_override = false # Override unsafe external calls to perform reentrancy checks
  depth = 50            # Number of calls executed in one run
  fail_on_revert = true
  runs = 50

# Speed up compilation and tests during development
[profile.lite]
  optimizer = false

# Compile only the production code with IR
[profile.optimized]
  out = "optimized-out"
  test = "src"
  via_ir = true

# See "SMTChecker and Formal Verification" in the Solidity docs
[profile.smt]
  ignored_error_codes = [
    7737, # Disable inline assembly warnings
  ]

[profile.smt.model_checker]
  engine = "chc" # constrained Horn clauses
  invariants = ["contract", "reentrancy"]
  show_unproved = true
  timeout = 100_000 # in milliseconds
  targets = [
    "assert",
    "constantCondition",
    "divByZero",
    "outOfBounds",
    "overflow",
    "underflow",
  ]

[profile.smt.model_checker.contracts]
  "src/SablierV2LockupLinear.sol" = ["SablierV2LockupLinear"]
  "src/SablierV2LockupPro.sol" = ["SablierV2LockupPro"]

# Test the optimized contracts without re-compiling them
[profile.test-optimized]
  fuzz = { runs = 5_000 }
  invariant = { depth = 150, runs = 100 }
  src = "test"
  verbosity = 4

[etherscan]
  arbitrum = { key = "${API_KEY_ARBISCAN}" }
  avalanche = { key = "${API_KEY_SNOWTRACE" }
  bsc = { key = "${API_KEY_BSCSCAN}" }
  ethereum = { key = "${API_KEY_ETHERSCAN}" }
  gnosis = { key = "${API_KEY_GNOSISSCAN}" }
  goerli = { key = "${API_KEY_ETHERSCAN}" }
  optimism = { key = "${API_KEY_OPTIMISTIC_ETHERSCAN}" }
  polygon = { key = "${API_KEY_POLYGONSCAN}" }
  sepolia = { key = "${API_KEY_ETHERSCAN}" }

[rpc_endpoints]
  arbitrum = "https://arbitrum-mainnet.infura.io/v3/${API_KEY_INFURA}"
  avalanche = "https://avalanche-mainnet.infura.io/v3/${API_KEY_INFURA}"
  bsc = "https://bsc-dataseed.binance.org"
  ethereum = "https://eth-mainnet.g.alchemy.com/v2/${API_KEY_ALCHEMY}"
  gnosis = "https://blockscout.com/xdai/mainnet/api/eth-rpc"
  goerli = "https://goerli.infura.io/v3/${API_KEY_INFURA}"
  localhost = "http://localhost:8545"
  optimism = "https://optimism-mainnet.infura.io/v3/${API_KEY_INFURA}"
  polygon = "https://polygon-mainnet.infura.io/v3/${API_KEY_INFURA}"
  sepolia = "https://sepolia.infura.io/v3/${API_KEY_INFURA}"
